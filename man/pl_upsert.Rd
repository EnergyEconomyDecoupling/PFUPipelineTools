% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/schema.R
\name{pl_upsert}
\alias{pl_upsert}
\title{Upsert a data frame with optional recoding of foreign keys}
\usage{
pl_upsert(
  .df,
  db_table_name,
  conn,
  in_place = FALSE,
  encode_fks = TRUE,
  schema = dm::dm_from_con(conn, learn_keys = TRUE),
  fk_parent_tables = PFUPipelineTools::get_all_fk_tables(conn = conn, schema = schema),
  .pk_col = PFUPipelineTools::dm_pk_colnames$pk_col,
  .algo = "md5"
)
}
\arguments{
\item{.df}{The data frame to be upserted.}

\item{db_table_name}{A string identifying the destination for \code{.df},
the name of a remote database table in \code{conn}.}

\item{conn}{A connection to the CL-PFU database.}

\item{in_place}{A boolean that tells whether to modify the database at \code{conn}.
Default is \code{FALSE}, which is helpful if you want to chain
several requests.}

\item{encode_fks}{A boolean that tells whether to code foreign keys in \code{.df}.
Default is \code{TRUE}.}

\item{schema}{The data model (\code{dm} object) for the database in \code{conn}.
Default is \code{dm::dm_from_con(conn, learn_keys = TRUE)}.
See details.}

\item{fk_parent_tables}{A named list of all parent tables
for the foreign keys in \code{db_table_name}.
See details.}

\item{.pk_col}{The name of the primary key column in a primary key table.
See \code{PFUPipelineTools::dm_pk_colnames}.}

\item{.algo}{The hashing algorithm.
Default is "md5".}
}
\value{
A hash of \code{.df} according to \code{.algo}.
}
\description{
Upserts
(inserts or updates,
depending on whether the information already exists in \code{db_table_name})
\code{.df} into \code{db_table_name} at \code{conn}.
This function decodes foreign keys, when possible,
by assuming that all keys are integers.
If non-integers are provided in foreign key columns of \code{.df},
the non-integers will be recoded to the integer key values.
Thus, this function assumes that the data model and schema
already exists in \code{conn}.
}
\details{
This function knows about CL-PFU database tables that contain
matrix information.
In particular, if \code{.df} contains matrices,
they are expanded into row-col-val format
before uploading.

The output of this function is a special data frame that
contains the following columns:

\if{html}{\out{<div class="sourceCode">}}\preformatted{* CLPFUDBTable: A column of character strings,
                all with the value of `db_table_name`.
* All foreign key columns: With their integer values (to save space).
* Hash: A column with a hash of all non-foreign-key columns.
}\if{html}{\out{</div>}}

\code{schema} is a data model (\code{dm} object) for the database in \code{conn}.
Its default value (\code{dm::dm_from_con(conn, learn_keys = TRUE)})
extracts the data model for the database at \code{conn} automatically.
However, if the caller already has the data model,
supplying it in the \code{schema} argument will save time.

\code{parent_tables} is a named list of tables,
one of which (the one named \code{db_table_name})
contains the foreign keys for \code{db_table_name}.
\code{parent_tables} is treated as a store from which foreign key tables
are retrieved by name when needed.
The default value (which is several lines of code)
retrieves all possible foreign key parent tables from conn,
potentially a time-consuming process.
For speed, pre-compute all foreign key parent tables once
and pass the list to the \code{parent_tables} argument
of all similar functions.

The user in \code{conn} must have write access to the database.
}
\seealso{
\code{pl_download()} for the reverse operation.
\code{pl_upload_schema_and_simple_tables()} for a way to establish the database schema.
}
