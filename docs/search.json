[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 PFUPipelineTools authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Heun. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Matthew Kuperus Heun (2023). PFUAggWorkflow: Calculate Aggregations Efficiencies Energy Conversion Chains PSUT Format R package version 0.1.1. https://github.com/EnergyEconomyDecoupling/PFUAggDatabase","code":"@Manual{,   title = {PFUPipelineTools: Tools for PFU Pipelines},   author = {Matthew Kuperus Heun},   year = {2023},   note = {R package version 0.1.1},   url = {https://github.com/EnergyEconomyDecoupling/PFUAggDatabase}, }"},{"path":"/index.html","id":"pfupipelinetools","dir":"","previous_headings":"","what":"Tools for PFU Pipelines","title":"Tools for PFU Pipelines","text":"PFUPipelineTools provides single package several functions used across various PFU pipelines.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for PFU Pipelines","text":"can install development version PFUPipelineTools GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"EnergyEconomyDecoupling/PFUPipelineTools\")"},{"path":"/index.html","id":"more-information","dir":"","previous_headings":"","what":"More Information","title":"Tools for PFU Pipelines","text":"Find information, including vignettes function documentation, https://MatthewHeun.github.io/PFUPipelineTools/.","code":""},{"path":"/reference/all_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"Country abbreviations — all_countries","title":"Country abbreviations — all_countries","text":"string list containing known countries abbreviated format. 3-letter codes analyzed separate countries. 3-letter codes conform ISO naming conventions. 4-letter codes ISO codes still analyzed separate countries. 5-letter codes (longer) aggregations.","code":""},{"path":"/reference/all_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Country abbreviations — all_countries","text":"","code":"all_countries"},{"path":"/reference/all_countries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Country abbreviations — all_countries","text":"string list 166 entries.","code":""},{"path":"/reference/all_countries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Country abbreviations — all_countries","text":"","code":"all_countries #> $afri #> [1] \"AFRI\" #>  #> $ago #> [1] \"AGO\" #>  #> $alb #> [1] \"ALB\" #>  #> $are #> [1] \"ARE\" #>  #> $arg #> [1] \"ARG\" #>  #> $arm #> [1] \"ARM\" #>  #> $asia #> [1] \"ASIA\" #>  #> $aus #> [1] \"AUS\" #>  #> $aut #> [1] \"AUT\" #>  #> $aze #> [1] \"AZE\" #>  #> $bel #> [1] \"BEL\" #>  #> $ben #> [1] \"BEN\" #>  #> $bgd #> [1] \"BGD\" #>  #> $bgr #> [1] \"BGR\" #>  #> $bhr #> [1] \"BHR\" #>  #> $bih #> [1] \"BIH\" #>  #> $blr #> [1] \"BLR\" #>  #> $bol #> [1] \"BOL\" #>  #> $bra #> [1] \"BRA\" #>  #> $brn #> [1] \"BRN\" #>  #> $bwa #> [1] \"BWA\" #>  #> $bunk #> [1] \"BUNK\" #>  #> $can #> [1] \"CAN\" #>  #> $che #> [1] \"CHE\" #>  #> $chl #> [1] \"CHL\" #>  #> $chnm #> [1] \"CHNM\" #>  #> $cmr #> [1] \"CMR\" #>  #> $cod #> [1] \"COD\" #>  #> $cog #> [1] \"COG\" #>  #> $col #> [1] \"COL\" #>  #> $civ #> [1] \"CIV\" #>  #> $cri #> [1] \"CRI\" #>  #> $cub #> [1] \"CUB\" #>  #> $cuw #> [1] \"CUW\" #>  #> $cyp #> [1] \"CYP\" #>  #> $cze #> [1] \"CZE\" #>  #> $deu #> [1] \"DEU\" #>  #> $dnk #> [1] \"DNK\" #>  #> $dom #> [1] \"DOM\" #>  #> $dza #> [1] \"DZA\" #>  #> $ecu #> [1] \"ECU\" #>  #> $egy #> [1] \"EGY\" #>  #> $eri #> [1] \"ERI\" #>  #> $esp #> [1] \"ESP\" #>  #> $est #> [1] \"EST\" #>  #> $eth #> [1] \"ETH\" #>  #> $eurp #> [1] \"EURP\" #>  #> $fin #> [1] \"FIN\" #>  #> $fra #> [1] \"FRA\" #>  #> $gab #> [1] \"GAB\" #>  #> $gbr #> [1] \"GBR\" #>  #> $geo #> [1] \"GEO\" #>  #> $gha #> [1] \"GHA\" #>  #> $gib #> [1] \"GIB\" #>  #> $gnq #> [1] \"GNQ\" #>  #> $grc #> [1] \"GRC\" #>  #> $gtm #> [1] \"GTM\" #>  #> $guy #> [1] \"GUY\" #>  #> $hkg #> [1] \"HKG\" #>  #> $hnd #> [1] \"HND\" #>  #> $hrv #> [1] \"HRV\" #>  #> $hti #> [1] \"HTI\" #>  #> $hun #> [1] \"HUN\" #>  #> $idn #> [1] \"IDN\" #>  #> $ind #> [1] \"IND\" #>  #> $irl #> [1] \"IRL\" #>  #> $irn #> [1] \"IRN\" #>  #> $irq #> [1] \"IRQ\" #>  #> $isl #> [1] \"ISL\" #>  #> $isr #> [1] \"ISR\" #>  #> $ita #> [1] \"ITA\" #>  #> $jam #> [1] \"JAM\" #>  #> $jor #> [1] \"JOR\" #>  #> $jpn #> [1] \"JPN\" #>  #> $kaz #> [1] \"KAZ\" #>  #> $ken #> [1] \"KEN\" #>  #> $kgz #> [1] \"KGZ\" #>  #> $khm #> [1] \"KHM\" #>  #> $kor #> [1] \"KOR\" #>  #> $kwt #> [1] \"KWT\" #>  #> $lao #> [1] \"LAO\" #>  #> $lbn #> [1] \"LBN\" #>  #> $lby #> [1] \"LBY\" #>  #> $lka #> [1] \"LKA\" #>  #> $ltu #> [1] \"LTU\" #>  #> $lux #> [1] \"LUX\" #>  #> $lva #> [1] \"LVA\" #>  #> $mar #> [1] \"MAR\" #>  #> $mda #> [1] \"MDA\" #>  #> $mdg #> [1] \"MDG\" #>  #> $mex #> [1] \"MEX\" #>  #> $mide #> [1] \"MIDE\" #>  #> $mkd #> [1] \"MKD\" #>  #> $mlt #> [1] \"MLT\" #>  #> $mmr #> [1] \"MMR\" #>  #> $mne #> [1] \"MNE\" #>  #> $mng #> [1] \"MNG\" #>  #> $moz #> [1] \"MOZ\" #>  #> $mus #> [1] \"MUS\" #>  #> $mys #> [1] \"MYS\" #>  #> $nam #> [1] \"NAM\" #>  #> $namr #> [1] \"NAMR\" #>  #> $ner #> [1] \"NER\" #>  #> $nga #> [1] \"NGA\" #>  #> $nic #> [1] \"NIC\" #>  #> $nld #> [1] \"NLD\" #>  #> $nor #> [1] \"NOR\" #>  #> $npl #> [1] \"NPL\" #>  #> $nzl #> [1] \"NZL\" #>  #> $oafr #> [1] \"OAFR\" #>  #> $oasi #> [1] \"OASI\" #>  #> $oamr #> [1] \"OAMR\" #>  #> $ocen #> [1] \"OCEN\" #>  #> $omn #> [1] \"OMN\" #>  #> $pak #> [1] \"PAK\" #>  #> $pan #> [1] \"PAN\" #>  #> $per #> [1] \"PER\" #>  #> $phl #> [1] \"PHL\" #>  #> $pol #> [1] \"POL\" #>  #> $prk #> [1] \"PRK\" #>  #> $prt #> [1] \"PRT\" #>  #> $pry #> [1] \"PRY\" #>  #> $qat #> [1] \"QAT\" #>  #> $rou #> [1] \"ROU\" #>  #> $rus #> [1] \"RUS\" #>  #> $rwa #> [1] \"RWA\" #>  #> $samr #> [1] \"SAMR\" #>  #> $sau #> [1] \"SAU\" #>  #> $sdn #> [1] \"SDN\" #>  #> $sen #> [1] \"SEN\" #>  #> $sgp #> [1] \"SGP\" #>  #> $slv #> [1] \"SLV\" #>  #> $srb #> [1] \"SRB\" #>  #> $ssd #> [1] \"SSD\" #>  #> $sun #> [1] \"SUN\" #>  #> $sur #> [1] \"SUR\" #>  #> $svk #> [1] \"SVK\" #>  #> $svn #> [1] \"SVN\" #>  #> $swe #> [1] \"SWE\" #>  #> $swz #> [1] \"SWZ\" #>  #> $syr #> [1] \"SYR\" #>  #> $tgo #> [1] \"TGO\" #>  #> $tha #> [1] \"THA\" #>  #> $tjk #> [1] \"TJK\" #>  #> $tkm #> [1] \"TKM\" #>  #> $tto #> [1] \"TTO\" #>  #> $tun #> [1] \"TUN\" #>  #> $tur #> [1] \"TUR\" #>  #> $twn #> [1] \"TWN\" #>  #> $tza #> [1] \"TZA\" #>  #> $uga #> [1] \"UGA\" #>  #> $ukr #> [1] \"UKR\" #>  #> $ury #> [1] \"URY\" #>  #> $usa #> [1] \"USA\" #>  #> $uzb #> [1] \"UZB\" #>  #> $ven #> [1] \"VEN\" #>  #> $vnm #> [1] \"VNM\" #>  #> $wabk #> [1] \"WABK\" #>  #> $wrld #> [1] \"WRLD\" #>  #> $wmbk #> [1] \"WMBK\" #>  #> $xkx #> [1] \"XKX\" #>  #> $yem #> [1] \"YEM\" #>  #> $yug #> [1] \"YUG\" #>  #> $zaf #> [1] \"ZAF\" #>  #> $zmb #> [1] \"ZMB\" #>  #> $zwe #> [1] \"ZWE\" #>"},{"path":"/reference/canonical_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"Canonical countries — canonical_countries","title":"Canonical countries — canonical_countries","text":"string list containing abbreviated names canonical countries. Canonical countries set difference all_countries double-counted_countries.","code":""},{"path":"/reference/canonical_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Canonical countries — canonical_countries","text":"","code":"canonical_countries"},{"path":"/reference/canonical_countries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Canonical countries — canonical_countries","text":"string list 157 entries.","code":""},{"path":"/reference/canonical_countries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Canonical countries — canonical_countries","text":"","code":"canonical_countries #> $ago #> [1] \"AGO\" #>  #> $alb #> [1] \"ALB\" #>  #> $are #> [1] \"ARE\" #>  #> $arg #> [1] \"ARG\" #>  #> $arm #> [1] \"ARM\" #>  #> $aus #> [1] \"AUS\" #>  #> $aut #> [1] \"AUT\" #>  #> $aze #> [1] \"AZE\" #>  #> $bel #> [1] \"BEL\" #>  #> $ben #> [1] \"BEN\" #>  #> $bgd #> [1] \"BGD\" #>  #> $bgr #> [1] \"BGR\" #>  #> $bhr #> [1] \"BHR\" #>  #> $bih #> [1] \"BIH\" #>  #> $blr #> [1] \"BLR\" #>  #> $bol #> [1] \"BOL\" #>  #> $bra #> [1] \"BRA\" #>  #> $brn #> [1] \"BRN\" #>  #> $bwa #> [1] \"BWA\" #>  #> $can #> [1] \"CAN\" #>  #> $che #> [1] \"CHE\" #>  #> $chl #> [1] \"CHL\" #>  #> $chnm #> [1] \"CHNM\" #>  #> $cmr #> [1] \"CMR\" #>  #> $cod #> [1] \"COD\" #>  #> $cog #> [1] \"COG\" #>  #> $col #> [1] \"COL\" #>  #> $civ #> [1] \"CIV\" #>  #> $cri #> [1] \"CRI\" #>  #> $cub #> [1] \"CUB\" #>  #> $cuw #> [1] \"CUW\" #>  #> $cyp #> [1] \"CYP\" #>  #> $cze #> [1] \"CZE\" #>  #> $deu #> [1] \"DEU\" #>  #> $dnk #> [1] \"DNK\" #>  #> $dom #> [1] \"DOM\" #>  #> $dza #> [1] \"DZA\" #>  #> $ecu #> [1] \"ECU\" #>  #> $egy #> [1] \"EGY\" #>  #> $eri #> [1] \"ERI\" #>  #> $esp #> [1] \"ESP\" #>  #> $est #> [1] \"EST\" #>  #> $eth #> [1] \"ETH\" #>  #> $fin #> [1] \"FIN\" #>  #> $fra #> [1] \"FRA\" #>  #> $gab #> [1] \"GAB\" #>  #> $gbr #> [1] \"GBR\" #>  #> $geo #> [1] \"GEO\" #>  #> $gha #> [1] \"GHA\" #>  #> $gib #> [1] \"GIB\" #>  #> $gnq #> [1] \"GNQ\" #>  #> $grc #> [1] \"GRC\" #>  #> $gtm #> [1] \"GTM\" #>  #> $guy #> [1] \"GUY\" #>  #> $hkg #> [1] \"HKG\" #>  #> $hnd #> [1] \"HND\" #>  #> $hrv #> [1] \"HRV\" #>  #> $hti #> [1] \"HTI\" #>  #> $hun #> [1] \"HUN\" #>  #> $idn #> [1] \"IDN\" #>  #> $ind #> [1] \"IND\" #>  #> $irl #> [1] \"IRL\" #>  #> $irn #> [1] \"IRN\" #>  #> $irq #> [1] \"IRQ\" #>  #> $isl #> [1] \"ISL\" #>  #> $isr #> [1] \"ISR\" #>  #> $ita #> [1] \"ITA\" #>  #> $jam #> [1] \"JAM\" #>  #> $jor #> [1] \"JOR\" #>  #> $jpn #> [1] \"JPN\" #>  #> $kaz #> [1] \"KAZ\" #>  #> $ken #> [1] \"KEN\" #>  #> $kgz #> [1] \"KGZ\" #>  #> $khm #> [1] \"KHM\" #>  #> $kor #> [1] \"KOR\" #>  #> $kwt #> [1] \"KWT\" #>  #> $lao #> [1] \"LAO\" #>  #> $lbn #> [1] \"LBN\" #>  #> $lby #> [1] \"LBY\" #>  #> $lka #> [1] \"LKA\" #>  #> $ltu #> [1] \"LTU\" #>  #> $lux #> [1] \"LUX\" #>  #> $lva #> [1] \"LVA\" #>  #> $mar #> [1] \"MAR\" #>  #> $mda #> [1] \"MDA\" #>  #> $mdg #> [1] \"MDG\" #>  #> $mex #> [1] \"MEX\" #>  #> $mkd #> [1] \"MKD\" #>  #> $mlt #> [1] \"MLT\" #>  #> $mmr #> [1] \"MMR\" #>  #> $mne #> [1] \"MNE\" #>  #> $mng #> [1] \"MNG\" #>  #> $moz #> [1] \"MOZ\" #>  #> $mus #> [1] \"MUS\" #>  #> $mys #> [1] \"MYS\" #>  #> $nam #> [1] \"NAM\" #>  #> $ner #> [1] \"NER\" #>  #> $nga #> [1] \"NGA\" #>  #> $nic #> [1] \"NIC\" #>  #> $nld #> [1] \"NLD\" #>  #> $nor #> [1] \"NOR\" #>  #> $npl #> [1] \"NPL\" #>  #> $nzl #> [1] \"NZL\" #>  #> $oafr #> [1] \"OAFR\" #>  #> $oasi #> [1] \"OASI\" #>  #> $oamr #> [1] \"OAMR\" #>  #> $omn #> [1] \"OMN\" #>  #> $pak #> [1] \"PAK\" #>  #> $pan #> [1] \"PAN\" #>  #> $per #> [1] \"PER\" #>  #> $phl #> [1] \"PHL\" #>  #> $pol #> [1] \"POL\" #>  #> $prk #> [1] \"PRK\" #>  #> $prt #> [1] \"PRT\" #>  #> $pry #> [1] \"PRY\" #>  #> $qat #> [1] \"QAT\" #>  #> $rou #> [1] \"ROU\" #>  #> $rus #> [1] \"RUS\" #>  #> $rwa #> [1] \"RWA\" #>  #> $sau #> [1] \"SAU\" #>  #> $sdn #> [1] \"SDN\" #>  #> $sen #> [1] \"SEN\" #>  #> $sgp #> [1] \"SGP\" #>  #> $slv #> [1] \"SLV\" #>  #> $srb #> [1] \"SRB\" #>  #> $ssd #> [1] \"SSD\" #>  #> $sun #> [1] \"SUN\" #>  #> $sur #> [1] \"SUR\" #>  #> $svk #> [1] \"SVK\" #>  #> $svn #> [1] \"SVN\" #>  #> $swe #> [1] \"SWE\" #>  #> $swz #> [1] \"SWZ\" #>  #> $syr #> [1] \"SYR\" #>  #> $tgo #> [1] \"TGO\" #>  #> $tha #> [1] \"THA\" #>  #> $tjk #> [1] \"TJK\" #>  #> $tkm #> [1] \"TKM\" #>  #> $tto #> [1] \"TTO\" #>  #> $tun #> [1] \"TUN\" #>  #> $tur #> [1] \"TUR\" #>  #> $twn #> [1] \"TWN\" #>  #> $tza #> [1] \"TZA\" #>  #> $uga #> [1] \"UGA\" #>  #> $ukr #> [1] \"UKR\" #>  #> $ury #> [1] \"URY\" #>  #> $usa #> [1] \"USA\" #>  #> $uzb #> [1] \"UZB\" #>  #> $ven #> [1] \"VEN\" #>  #> $vnm #> [1] \"VNM\" #>  #> $wabk #> [1] \"WABK\" #>  #> $wmbk #> [1] \"WMBK\" #>  #> $xkx #> [1] \"XKX\" #>  #> $yem #> [1] \"YEM\" #>  #> $yug #> [1] \"YUG\" #>  #> $zaf #> [1] \"ZAF\" #>  #> $zmb #> [1] \"ZMB\" #>  #> $zwe #> [1] \"ZWE\" #>"},{"path":"/reference/data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data pronoun — .data","title":"Data pronoun — .data","text":"See rlang::.data details.","code":""},{"path":"/reference/data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data pronoun — .data","text":"","code":".data"},{"path":"/reference/double_counted_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"Double-counted countries — double_counted_countries","title":"Double-counted countries — double_counted_countries","text":"string list containing abbreviated names double-counted countries.","code":""},{"path":"/reference/double_counted_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double-counted countries — double_counted_countries","text":"","code":"double_counted_countries"},{"path":"/reference/double_counted_countries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Double-counted countries — double_counted_countries","text":"string list 9 entries.","code":""},{"path":"/reference/double_counted_countries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double-counted countries — double_counted_countries","text":"","code":"double_counted_countries #> $afri #> [1] \"AFRI\" #>  #> $asia #> [1] \"ASIA\" #>  #> $bunk #> [1] \"BUNK\" #>  #> $eurp #> [1] \"EURP\" #>  #> $mide #> [1] \"MIDE\" #>  #> $namr #> [1] \"NAMR\" #>  #> $ocen #> [1] \"OCEN\" #>  #> $samr #> [1] \"SAMR\" #>  #> $wrld #> [1] \"WRLD\" #>"},{"path":"/reference/filter_countries_years.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract specific country and year data — filter_countries_years","title":"Extract specific country and year data — filter_countries_years","text":"Data extracted according countries years objects way amenable drake subtargets. dplyr::filter() subsetting.","code":""},{"path":"/reference/filter_countries_years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract specific country and year data — filter_countries_years","text":"","code":"filter_countries_years(   .df,   countries,   years,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year )"},{"path":"/reference/filter_countries_years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract specific country and year data — filter_countries_years","text":".df data frame containing cleaned data lots countries years. countries list country codes countries analyzed. \"\" means return countries. years vector years. \"\" means return years. country, year See IEATools::iea_cols.","code":""},{"path":"/reference/filter_countries_years.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract specific country and year data — filter_countries_years","text":"data frame desired IEA data .","code":""},{"path":"/reference/filter_countries_years.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract specific country and year data — filter_countries_years","text":"","code":"IEATools::sample_iea_data_path() |>   IEATools::load_tidy_iea_df() |>   filter_countries_years(countries = c(\"ZAF\"), years = 1960:1999) #> # A tibble: 98 × 11 #>    Country Method Energy.type Last.stage  Year Ledger.side #>    <chr>   <chr>  <chr>       <chr>      <dbl> <chr>       #>  1 ZAF     PCM    E           Final       1971 Supply      #>  2 ZAF     PCM    E           Final       1971 Supply      #>  3 ZAF     PCM    E           Final       1971 Supply      #>  4 ZAF     PCM    E           Final       1971 Supply      #>  5 ZAF     PCM    E           Final       1971 Supply      #>  6 ZAF     PCM    E           Final       1971 Supply      #>  7 ZAF     PCM    E           Final       1971 Supply      #>  8 ZAF     PCM    E           Final       1971 Supply      #>  9 ZAF     PCM    E           Final       1971 Supply      #> 10 ZAF     PCM    E           Final       1971 Supply      #> # ℹ 88 more rows #> # ℹ 5 more variables: Flow.aggregation.point <chr>, Flow <chr>, Product <chr>, #> #   Unit <chr>, E.dot <dbl>"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/quasi-quote-assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Assignment — :=","title":"Assignment — :=","text":"See rlang:::= details.","code":""},{"path":"/reference/quasi-quote-assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assignment — :=","text":"","code":"x := y"},{"path":"/reference/release_target.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a target to a pinboard. — release_target","title":"Save a target to a pinboard. — release_target","text":"Releases (release = TRUE) (release = FALSE) new version targ using pins package.","code":""},{"path":"/reference/release_target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a target to a pinboard. — release_target","text":"","code":"release_target(   pipeline_releases_folder,   targ,   pin_name,   type = \"rds\",   release = FALSE )"},{"path":"/reference/release_target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a target to a pinboard. — release_target","text":"pipeline_releases_folder folder contains pinboard releases pipeline. targ target R object saved pinboard. pin_name name pin pinboard. pin_name key retrieving targ. type type target, routed pins::pin_write(). Default \"rds\". \"csv\" another option. release boolean telling whether release. Default FALSE.","code":""},{"path":"/reference/release_target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a target to a pinboard. — release_target","text":"release TRUE, fully-qualified path name targ file pinboard. release FALSE, string \"Release requested.\"","code":""},{"path":"/reference/release_target.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save a target to a pinboard. — release_target","text":"Released versions target can obtained shown examples.","code":""},{"path":"/reference/release_target.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a target to a pinboard. — release_target","text":"","code":"if (FALSE) { # Establish the pinboard pinboard <- pins::board_folder(\"~/Dropbox/Fellowship 1960-2015 PFU database/OutputData/PipelineReleases/\") # Get information about the `PSUT` target in the pinboard pinboard |>   pins::pin_meta(name = \"psut\") # Find versions of the `PSUT` target pinboard |>   pins::pin_versions(name = \"psut\") # Get the latest copy of the `PSUT` target. my_psut <- pinboard |>   pins::pin_read(name = \"psut\") # Retrieve a previous version of the `PSUT` target. my_old_psut <- pinboard |>   pins::pin_read(name = \"psut\", version = \"20220218T023112Z-1d9e1\")}"},{"path":"/reference/stash_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the cache to a zip file, then to pipeline_caches_folder — stash_cache","title":"Save the cache to a zip file, then to pipeline_caches_folder — stash_cache","text":"Saves pipeline cache zip file pipeline_caches_folder.","code":""},{"path":"/reference/stash_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the cache to a zip file, then to pipeline_caches_folder — stash_cache","text":"","code":"stash_cache(   pipeline_caches_folder,   cache_folder,   file_prefix,   dependency,   release = FALSE )"},{"path":"/reference/stash_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the cache to a zip file, then to pipeline_caches_folder — stash_cache","text":"pipeline_caches_folder folder pipeline cache saved .zip file. cache_folder cache folder zipped saved. path interpreted relative working directory. file_prefix prefix output file name. dependency last target executed saving cache. used internally. release boolean telling whether release. cache stored releases. Default FALSE.","code":""},{"path":"/reference/stash_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save the cache to a zip file, then to pipeline_caches_folder — stash_cache","text":"cache saved, file name returned. release = FALSE, string \"Release requested.\" returned.","code":""},{"path":"/reference/stash_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save the cache to a zip file, then to pipeline_caches_folder — stash_cache","text":"Note dependency argument used internally. Rather, dependency exists ensure pipeline executes right targets saving cache.","code":""},{"path":"/reference/tar_ungroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Ungroups and removes tar_group column from a data frame — tar_ungroup","title":"Ungroups and removes tar_group column from a data frame — tar_ungroup","text":"tarchetypes::tar_group_by() function adds column named \"tar_group\". function ungroups removes special column.","code":""},{"path":"/reference/tar_ungroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ungroups and removes tar_group column from a data frame — tar_ungroup","text":"","code":"tar_ungroup(.df, tar_group_colname = \"tar_group\", ungroup = TRUE)"},{"path":"/reference/tar_ungroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ungroups and removes tar_group column from a data frame — tar_ungroup","text":".df data frame ungrouped. tar_group_colname name grouping column. Default \"tar_group\". ungroup boolean tells whether ungroup .df. Default TRUE.","code":""},{"path":"/reference/tar_ungroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ungroups and removes tar_group column from a data frame — tar_ungroup","text":"modified version .df.","code":""},{"path":"/news/index.html","id":"pfupipelinetools-011-2023-06-06","dir":"Changelog","previous_headings":"","what":"PFUPipelineTools 0.1.1 (2023-06-06)","title":"PFUPipelineTools 0.1.1 (2023-06-06)","text":"Initial release Added NEWS.md file track changes package. 2 tests, passing. Test coverage low (17 %) improve.","code":""}]
